function sData = analyzeData(data)
%%
%
%   Derive features from the vibration signal. Later we use these features
%   to determine the type of fault from the vibration signal as well as for
%   selecting the minimum number of features needed.
%

% Copyright 2017 MathWorks Inc.

%create list of features that will be computed
varnames = {...
    'SigMean', ...
    'SigMedian', ...
    'SigRMS', ...
    'SigVar', ...
    'SigPeak', ...
    'SigPeak2Peak', ...
    'SigSkewness', ...
    'SigKurtosis', ...
    'SigCrestFactor', ...
    'SigMAD', ...
    'SigRangeCumSum', ...
    'SigCorrDimension', ...
    'SigApproxEntropy', ...
    'SigLyapExponent', ...
    'PeakFreq', ...
    'HighFreqPower', ...
    'EnvPower', ...
    'PeakSpecKurtosis'};

if ischar(data)
    %Return the names of the features being computed
    sData = varnames(:);
    return
end

%Extract the vibration signal to use for feature calculation
Vibration = data.Vibration{1};

%Interpolate the Vibration signal onto periodic time base suitable for fft analysis
np = 2^floor(log(height(Vibration))/log(2));
dt = Vibration.Time(end)/(np-1);
tv = 0:dt:Vibration.Time(end);
y = retime(Vibration,tv,'linear');

%Signal mean
SigMean = mean(Vibration.Data);

%Signal median
SigMedian = median(Vibration.Data);

%Signal RMS
SigRMS = rms(Vibration.Data);

%Signal variance
SigVar = var(Vibration.Data);

%Signal Peak
SigPeak = max(Vibration.Data);

%Signal Peak-to-peak
SigPeak2Peak = peak2peak(Vibration.Data);

%Signal skewness
SigSkewness = skewness(Vibration.Data);

%Signal kurtosis
SigKurtosis = kurtosis(Vibration.Data);

%Signal Crest Factor
SigCrestFactor = peak2rms(Vibration.Data);

%Signal Median Absolute Deviation
SigMAD = mad(Vibration.Data);

%Signal range of cumulative sum
d = cumsum(Vibration.Data);
SigRangeCumSum = max(d)-min(d);
    
%Signal correlation dimension
SigCorrDimension = correlationDimension(y.Data);

%Signal approximate entropy
SigApproxEntropy = approximateEntropy(y.Data);

%Signal lyapunovExponent
SigLyapExponent = lyapunovExponent(y.Data,1/seconds(dt));
    
%Compute the FFT of the Time synchronous average of the vibration signal
dt = seconds(dt);
tp = seconds(data.TachoPulses{1});
vibrationTSA = tsa(y,tp);
np = numel(vibrationTSA);
f = fft(vibrationTSA.tsa.*hamming(np))/np;
frTSA = f(1:floor(np/2)+1);
wTSA = (0:np/2)/np*(2*pi/dt);
mTSA = abs(frTSA);

%Peak frequency
[~,idx] = max(mTSA);
PeakFreq = wTSA(idx);

%Power above 30Hz
HighFreqPower = sum(mTSA(wTSA > 30).^2);

%Envelope of TSA
M_env = envspectrum(vibrationTSA);

%Envelope power
EnvPower = sum(M_env.^2);

%Frequency with maximum spectral kurtosis
[~,~,~,fc] = kurtogram(y.Data,1/dt,8);
PeakSpecKurtosis = fc;
    
%Save computed values
varnames = {...
    'SigMean', ...
    'SigMedian', ...
    'SigRMS', ...
    'SigVar', ...
    'SigPeak', ...
    'SigPeak2Peak', ...
    'SigSkewness', ...
    'SigKurtosis', ...
    'SigCrestFactor', ...
    'SigMAD', ...
    'SigRangeCumSum', ...
    'SigCorrDimension', ...
    'SigApproxEntropy', ...
    'SigLyapExponent', ...
    'PeakFreq', ...
    'HighFreqPower', ...
    'EnvPower', ...
    'PeakSpecKurtosis'};
sData = table(...
    SigMean, ...
    SigMedian, ...
    SigRMS, ...
    SigVar, ...
    SigPeak, ...
    SigPeak2Peak, ...
    SigSkewness, ...
    SigKurtosis, ...
    SigCrestFactor, ...
    SigMAD, ...
    SigRangeCumSum, ...
    SigCorrDimension, ...
    SigApproxEntropy, ...
    SigLyapExponent, ...
    PeakFreq, ...
    HighFreqPower, ...
    EnvPower, ...
    PeakSpecKurtosis, ...
    'VariableNames', varnames);
end